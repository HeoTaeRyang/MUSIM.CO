// src/pages/Exercise.tsx

import "../styles/Exercise.css";
import { useState, useMemo, useRef, useEffect, useCallback } from "react";
import axios from "axios"; // axios ÏûÑÌè¨Ìä∏

// ‚òÖ‚òÖ‚òÖ Ïù¥ÎØ∏ÏßÄ ÏûÑÌè¨Ìä∏ Ï∂îÍ∞Ä (src/assets Ìè¥ÎçîÏóê Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎã§Í≥† Í∞ÄÏ†ï) ‚òÖ‚òÖ‚òÖ
import searchimg from "../assets/search.png";
import exe_main from "../assets/exe_main.png";
import exe_main2 from "../assets/exe_main2.png";
import exe_main3 from "../assets/exe_main3.png";

import thumbnail1 from "../assets/thumbnail1.png";
import thumbnail2 from "../assets/thumbnail2.png";
import thumbnail3 from "../assets/thumbnail3.png";
import thumbnail4 from "../assets/thumbnail4.png";
import thumbnail5 from "../assets/thumbnail5.png";
import thumbnail6 from "../assets/thumbnail6.png";
import thumbnail7 from "../assets/thumbnail7.png";
import thumbnail8 from "../assets/thumbnail8.png";
import thumbnail9 from "../assets/thumbnail9.png";

// API ÌÜµÏã†ÏùÑ ÏúÑÌïú Í∏∞Î≥∏ URL (Î∞±ÏóîÎìú ÏÑúÎ≤Ñ Ï£ºÏÜåÎ°ú Î≥ÄÍ≤ΩÌï¥Ï£ºÏÑ∏Ïöî!)
// ÌòÑÏû¨ Flask ÏÑúÎ≤ÑÎäî HTTPÎßå ÏßÄÏõêÌïòÎØÄÎ°ú, Î∞òÎìúÏãú http:// Î°ú Ïú†ÏßÄÌï¥Ïïº Ìï©ÎãàÎã§.
const API_BASE_URL = "http://127.0.0.1:5000"; // ‚òÖ‚òÖ‚òÖ Ï§ëÏöî: http:// Î°ú Ïú†ÏßÄ! ‚òÖ‚òÖ‚òÖ

// Î∞±ÏóîÎìú API ÏùëÎãµ ÌòïÏãùÏóê ÎßûÏ∂∞ Ïû¨Ï†ïÏùòÎêú Video Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
interface Video {
  id: number;
  views: number;
  recommendations: number; // 'likes' ÎåÄÏã† 'recommendations'
  upload_date: string; // 'date' ÎåÄÏã† 'upload_date'
  title: string;
  video_url: string; // 'videoId' ÎåÄÏã† 'video_url'
  correctable: number; // 'isCorrection' ÎåÄÏã† 'correctable' (1 ÎòêÎäî 0)
  isFavorite?: boolean; // Î∞±ÏóîÎìúÏóêÏÑú Ïò§ÏßÄ ÏïäÏùÑ Ïàò ÏûàÏúºÎØÄÎ°ú optional
  thumbnail_url: string; // 'thumbnail' ÎåÄÏã† 'thumbnail_url'

  // Ï∂îÍ∞Ä ÌïÑÎìú (API ÏùëÎãµÏóê Ìè¨Ìï®Îê®)
  description: string;
  product_link: string | null;
}

// Ïò§ÎäòÏùò Ï∂îÏ≤ú ÏòÅÏÉÅ Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Ï†ïÏùò (Video Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÌôïÏû•)
interface TodayVideo extends Video {
  topText?: string;
  middleText?: string;
  bottomText?: string;
}

// üí° ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÏùò - Ïù¥ÎØ∏ÏßÄ Í≤ΩÎ°ú Î∞òÏòÅ
const DUMMY_TODAY_VIDEOS: TodayVideo[] = [
  {
    id: 9991,
    views: 12345,
    recommendations: 500,
    upload_date: "Mon, 24 May 2024 10:00:00 GMT",
    title: "ÎçîÎØ∏ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô 1",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_1", // Ïã§Ï†ú ÎçîÎØ∏ ÎπÑÎîîÏò§ URL
    correctable: 1,
    isFavorite: false,
    thumbnail_url: exe_main, // ‚òÖ exe_main Ïù¥ÎØ∏ÏßÄ Ï†ÅÏö©
    description: "Ïù¥Í≤ÉÏùÄ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô ÎçîÎØ∏ ÏòÅÏÉÅ 1ÏûÖÎãàÎã§.",
    product_link: null,
    topText: "üî• Ïò§Î•ò Ïãú ÎåÄÏ≤¥ Ïö¥Îèô 1",
    middleText: "ÎçîÎØ∏ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô 1",
    bottomText: "Ï°∞ÌöåÏàò: 12,345Ìöå | Ï∂îÏ≤úÏàò: 500Ìöå",
  },
  {
    id: 9992,
    views: 23456,
    recommendations: 700,
    upload_date: "Tue, 25 May 2024 11:00:00 GMT",
    title: "ÎçîÎØ∏ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô 2",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_2", // Ïã§Ï†ú ÎçîÎØ∏ ÎπÑÎîîÏò§ URL
    correctable: 0,
    isFavorite: false,
    thumbnail_url: exe_main2, // ‚òÖ exe_main2 Ïù¥ÎØ∏ÏßÄ Ï†ÅÏö©
    description: "Ïù¥Í≤ÉÏùÄ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô ÎçîÎØ∏ ÏòÅÏÉÅ 2ÏûÖÎãàÎã§.",
    product_link: null,
    topText: "üåü Ï∂îÍ∞Ä Ï∂îÏ≤ú Ïö¥Îèô 2",
    middleText: "ÎçîÎØ∏ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô 2",
    bottomText: "Ï°∞ÌöåÏàò: 23,456Ìöå | Ï∂îÏ≤úÏàò: 700Ìöå",
  },
  {
    id: 9993,
    views: 34567,
    recommendations: 900,
    upload_date: "Wed, 26 May 2024 12:00:00 GMT",
    title: "ÎçîÎØ∏ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô 3",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_3", // Ïã§Ï†ú ÎçîÎØ∏ ÎπÑÎîîÏò§ URL
    correctable: 1,
    isFavorite: true,
    thumbnail_url: exe_main3, // ‚òÖ exe_main3 Ïù¥ÎØ∏ÏßÄ Ï†ÅÏö©
    description: "Ïù¥Í≤ÉÏùÄ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô ÎçîÎØ∏ ÏòÅÏÉÅ 3ÏûÖÎãàÎã§.",
    product_link: null,
    topText: "üí™ Ïä§ÌéòÏÖú Ï∂îÏ≤ú Ïö¥Îèô 3",
    middleText: "ÎçîÎØ∏ Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô 3",
    bottomText: "Ï°∞ÌöåÏàò: 34,567Ìöå | Ï∂îÏ≤úÏàò: 900Ìöå",
  },
];


const DUMMY_VIDEOS: Video[] = [
  {
    id: 101,
    views: 1500,
    recommendations: 120,
    upload_date: "Wed, 22 May 2024 14:30:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 1: Í∞ïÎ†•Ìïú ÏΩîÏñ¥ Ïö¥Îèô",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_4",
    correctable: 1,
    isFavorite: false,
    thumbnail_url: thumbnail1, // ‚òÖ thumbnail1 Ï†ÅÏö©
    description: "ÏΩîÏñ¥ Í∑ºÏú°ÏùÑ Í∞ïÌôîÌïòÎäî Ìö®Í≥ºÏ†ÅÏù∏ Ïö¥Îèô Î£®Ìã¥ÏûÖÎãàÎã§.",
    product_link: null,
  },
  {
    id: 102,
    views: 800,
    recommendations: 70,
    upload_date: "Tue, 21 May 2024 09:15:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 2: Ïú†Ïó∞ÏÑ± Ïä§Ìä∏Î†àÏπ≠",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_5",
    correctable: 0,
    isFavorite: true,
    thumbnail_url: thumbnail2, // ‚òÖ thumbnail2 Ï†ÅÏö©
    description: "ÌïòÎ£®Î•º ÏÉÅÏæåÌïòÍ≤å ÏãúÏûëÌïòÎäî Î™®Îãù Ïä§Ìä∏Î†àÏπ≠ÏûÖÎãàÎã§.",
    product_link: null,
  },
  {
    id: 103,
    views: 2200,
    recommendations: 180,
    upload_date: "Mon, 20 May 2024 18:45:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 3: Ï†ÑÏã† Í≥†Í∞ïÎèÑ Ïù∏ÌÑ∞Î≤å",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_6",
    correctable: 1,
    isFavorite: false,
    thumbnail_url: thumbnail3, // ‚òÖ thumbnail3 Ï†ÅÏö©
    description: "Îã®ÏãúÍ∞ÑÏóê Ìö®Í≥ºÎ•º Î≥º Ïàò ÏûàÎäî HIIT Ïö¥ÎèôÏûÖÎãàÎã§.",
    product_link: "https://example.com/product/1",
  },
  {
    id: 104,
    views: 500,
    recommendations: 30,
    upload_date: "Sun, 19 May 2024 10:00:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 4: ÏöîÍ∞Ä Ï¥àÎ≥¥Ïûê Í∞ÄÏù¥Îìú",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_7",
    correctable: 0,
    isFavorite: false,
    thumbnail_url: thumbnail4, // ‚òÖ thumbnail4 Ï†ÅÏö©
    description: "ÏöîÍ∞ÄÎ•º Ï≤òÏùå ÏãúÏûëÌïòÎäî Î∂ÑÎì§ÏùÑ ÏúÑÌïú Í∏∞Î≥∏ Í∞ÄÏù¥ÎìúÏûÖÎãàÎã§.",
    product_link: null,
  },
  {
    id: 105,
    views: 3000,
    recommendations: 250,
    upload_date: "Sat, 18 May 2024 16:00:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 5: ÏÉÅÏ≤¥ Í∑ºÎ†• Ïö¥Îèô",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_8",
    correctable: 1,
    isFavorite: true,
    thumbnail_url: thumbnail5, // ‚òÖ thumbnail5 Ï†ÅÏö©
    description: "ÏßëÏóêÏÑú Ìï† Ïàò ÏûàÎäî Ìö®Í≥ºÏ†ÅÏù∏ ÏÉÅÏ≤¥ Ïö¥ÎèôÏûÖÎãàÎã§.",
    product_link: null,
  },
  {
    id: 106,
    views: 1200,
    recommendations: 90,
    upload_date: "Fri, 17 May 2024 07:00:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 6: ÌïòÏ≤¥ ÏßëÏ§ë Ïö¥Îèô",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_9",
    correctable: 1,
    isFavorite: false,
    thumbnail_url: thumbnail6, // ‚òÖ thumbnail6 Ï†ÅÏö©
    description: "ÌÉÑÌÉÑÌïú ÌïòÏ≤¥Î•º ÏúÑÌïú Ïä§ÏøºÌä∏ Î∞è Îü∞ÏßÄ Î£®Ìã¥.",
    product_link: null,
  },
  {
    id: 107,
    views: 900,
    recommendations: 50,
    upload_date: "Thu, 16 May 2024 11:30:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 7: Î™ÖÏÉÅ Î∞è Ïù¥ÏôÑ",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_10",
    correctable: 0,
    isFavorite: false,
    thumbnail_url: thumbnail7, // ‚òÖ thumbnail7 Ï†ÅÏö©
    description: "Ïä§Ìä∏Î†àÏä§ Ìï¥ÏÜåÏôÄ ÎßàÏùåÏùò ÏïàÏ†ïÏùÑ ÏúÑÌïú Î™ÖÏÉÅ.",
    product_link: null,
  },
  {
    id: 108,
    views: 1800,
    recommendations: 150,
    upload_date: "Wed, 15 May 2024 13:00:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 8: Î≥µÍ∑º Í∞ïÌôî Ïö¥Îèô",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_11",
    correctable: 1,
    isFavorite: false,
    thumbnail_url: thumbnail8, // ‚òÖ thumbnail8 Ï†ÅÏö©
    description: "ÏÑ†Î™ÖÌïú Î≥µÍ∑ºÏùÑ ÎßåÎìúÎäî Îç∞ ÎèÑÏõÄÏùÑ Ï£ºÎäî Ïö¥Îèô.",
    product_link: null,
  },
  {
    id: 109,
    views: 2500,
    recommendations: 200,
    upload_date: "Tue, 14 May 2024 08:00:00 GMT",
    title: "ÎçîÎØ∏ ÏòÅÏÉÅ 9: Ïú†ÏÇ∞ÏÜå Ïù∏ÌÑ∞Î≤å",
    video_url: "https://www.youtube.com/embed/VIDEO_ID_12",
    correctable: 0,
    isFavorite: true,
    thumbnail_url: thumbnail9, // ‚òÖ thumbnail9 Ï†ÅÏö©
    description: "Ï≤¥ÏßÄÎ∞© Í∞êÏÜåÏóê Ìö®Í≥ºÏ†ÅÏù∏ Ïú†ÏÇ∞ÏÜå Ïù∏ÌÑ∞Î≤å Ìä∏Î†àÏù¥Îãù.",
    product_link: null,
  },
];


const Exercise = () => {
  const [sortType, setSortType] = useState<"recent" | "like" | "watch">("recent");
  const [searchQuery, setSearchQuery] = useState("");
  const [lastActiveBannerIndex, setLastActiveBannerIndex] = useState<number>(0);
  const [hoveredBannerIndex, setHoveredBannerIndex] = useState<number | null>(null);
  const [showAutocomplete, setShowAutocomplete] = useState(false);

  const [isDragging, setIsDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [currentTranslateX, setCurrentTranslateX] = useState(0);
  const [draggedDistance, setDraggedDistance] = useState(0);

  const [showFilterOptions, setShowFilterOptions] = useState(false);
  const [showOnlyCorrectionVideos, setShowOnlyCorrectionVideos] = useState(false);
  const [showOnlyFavoriteVideos, setShowOnlyFavoriteVideos] = useState(false);

  const [bannerVideos, setBannerVideos] = useState<TodayVideo[]>([]);
  const [videosToDisplay, setVideosToDisplay] = useState<Video[]>([]);
  const [loadingBanner, setLoadingBanner] = useState(true);
  const [errorBanner, setErrorBanner] = useState<string | null>(null);
  const [loadingVideos, setLoadingVideos] = useState(true);
  const [errorVideos, setErrorVideos] = useState<string | null>(null);


  const overlappingBannersWrapperRef = useRef<HTMLDivElement>(null);
  const filterButtonRef = useRef<HTMLDivElement>(null);
  const sortDropdownRef = useRef<HTMLDivElement>(null);


  // ----------------------------------------------------
  // API Ìò∏Ï∂ú Î°úÏßÅ ÏãúÏûë
  // ----------------------------------------------------

  // /video/today API Ìò∏Ï∂ú (Î©îÏù∏ Î∞∞ÎÑà ÏòÅÏÉÅ)
  const fetchTodayVideos = useCallback(async () => {
    setLoadingBanner(true);
    setErrorBanner(null);
    try {
      // Îã®Ïùº /video/today API Ìò∏Ï∂ú
      const response = await axios.get<Video>(`${API_BASE_URL}/video/today`);
      const data: Video = response.data;

      console.log("‚úîÔ∏è /video/today API ÏùëÎãµ ÏÑ±Í≥µ:", data);

      const todayVideoData: TodayVideo = {
        ...data,
        topText: "Ïò§ÎäòÏùò Ï∂îÏ≤ú Ïö¥Îèô",
        middleText: data.title,
        bottomText: `Ï°∞ÌöåÏàò: ${data.views}Ìöå | Ï∂îÏ≤úÏàò: ${data.recommendations}Ìöå`,
      };
      // Ïã§Ï†ú APIÍ∞Ä Îã®Ïùº ÏòÅÏÉÅÏùÑ Î∞òÌôòÌïòÎØÄÎ°ú, Î∞∞Ïó¥Ïóê Îã¥ÏïÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.
      // ÎßåÏïΩ Î∞±ÏóîÎìúÏóêÏÑú Ïó¨Îü¨ Í∞úÏùò Ï∂îÏ≤ú ÏòÅÏÉÅÏùÑ Î∞∞Ïó¥Î°ú Î∞òÌôòÌïúÎã§Î©¥,
      // `setBannerVideos(response.data.map(video => { ... }))` ÏôÄ Í∞ôÏù¥ Î≥ÄÍ≤ΩÌï¥Ïïº Ìï©ÎãàÎã§.
      setBannerVideos([todayVideoData]);
    } catch (err) {
      console.error("Failed to fetch today's videos:", err);
      setErrorBanner(axios.isAxiosError(err) ? (err.response?.data?.error || "Ïò§ÎäòÏùò Ï∂îÏ≤ú ÏòÅÏÉÅ Î°úÎìú Ïã§Ìå®") : "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò Î∞úÏÉù");
      // üí° ÏóêÎü¨ Î∞úÏÉù Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥
      setBannerVideos(DUMMY_TODAY_VIDEOS); // Î°§ÎßÅÏùÑ ÏúÑÌï¥ Î∞∞Ïó¥ ÎçîÎØ∏ ÏÇ¨Ïö©
    } finally {
      setLoadingBanner(false);
    }
  }, []);

  // ÌïòÎã® ÏòÅÏÉÅ Î™©Î°ù API Ìò∏Ï∂ú
  const fetchVideos = useCallback(async (
    filterCorrection: boolean,
    filterFavorite: boolean,
    currentSortType: "recent" | "like" | "watch",
    currentSearchQuery: string
  ) => {
    setLoadingVideos(true);
    setErrorVideos(null);
    try {
      let url = `${API_BASE_URL}/video/list`;
      let method: 'GET' | 'POST' = 'GET';
      let body: any = null;

      if (filterCorrection) {
        url = `${API_BASE_URL}/video/correctable`;
      } else if (filterFavorite) {
        url = `${API_BASE_URL}/video/favorite`;
        method = 'POST';
        // TODO: Ïã§Ï†ú user_idÎ•º Í∞ÄÏ†∏ÏôÄÏïº Ìï©ÎãàÎã§. ÌòÑÏû¨Îäî ÏûÑÏãúÎ°ú 1ÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.
        body = { id: 1 };
      } else if (currentSearchQuery.trim() !== "") {
        url = `${API_BASE_URL}/video/search`;
        method = 'POST';
        body = { keyword: currentSearchQuery };
      } else if (currentSortType !== "recent") {
        url = `${API_BASE_URL}/video/sort`;
        method = 'POST';
        body = { keyword: currentSortType };
      }

      const response = await axios({
        url: url,
        method: method,
        data: body,
      });
      const data: Video[] = response.data;

      console.log(`‚úîÔ∏è ${url} API ÏùëÎãµ ÏÑ±Í≥µ:`, data);

      // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° Ï†ïÎ†¨ (Î∞±ÏóîÎìúÏóêÏÑú Ï†ïÎ†¨ÎêòÏßÄ ÏïäÏïòÏùÑ Í≤ΩÏö∞Î•º ÎåÄÎπÑ)
      let sortedData = [...data];
      if (currentSortType === "recent") {
        sortedData.sort((a, b) => new Date(b.upload_date).getTime() - new Date(a.upload_date).getTime());
      } else if (currentSortType === "like") {
        sortedData.sort((a, b) => b.recommendations - a.recommendations);
      } else if (currentSortType === "watch") {
        sortedData.sort((a, b) => b.views - a.views);
      }

      setVideosToDisplay(sortedData);
    } catch (err) {
      console.error("Failed to fetch videos:", err);
      setErrorVideos(axios.isAxiosError(err) ? (err.response?.data?.error || "ÏòÅÏÉÅ Î™©Î°ù Î°úÎìú Ïã§Ìå®") : "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò Î∞úÏÉù");
      // üí° ÏóêÎü¨ Î∞úÏÉù Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥
      setVideosToDisplay(DUMMY_VIDEOS);
    } finally {
      setLoadingVideos(false);
    }
  }, []);

  // ‚òÖ‚òÖ‚òÖ useEffectÎ•º ÏÇ¨Ïö©ÌïòÏó¨ API Ìò∏Ï∂ú ‚òÖ‚òÖ‚òÖ
  useEffect(() => {
    fetchTodayVideos(); // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïò§ÎäòÏùò Ï∂îÏ≤ú ÏòÅÏÉÅ Î°úÎìú
  }, [fetchTodayVideos]);

  // Í≤ÄÏÉâ ÏøºÎ¶¨, Ï†ïÎ†¨ ÌÉÄÏûÖ, ÌïÑÌÑ∞ ÏòµÏÖòÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÌïòÎã® ÏòÅÏÉÅ Î™©Î°ù Îã§Ïãú Î°úÎìú
  useEffect(() => {
    fetchVideos(showOnlyCorrectionVideos, showOnlyFavoriteVideos, sortType, searchQuery);
  }, [showOnlyCorrectionVideos, showOnlyFavoriteVideos, sortType, searchQuery, fetchVideos]);

  // ----------------------------------------------------
  // API Ìò∏Ï∂ú Î°úÏßÅ ÎÅù
  // ----------------------------------------------------


  const autocompleteSuggestions = useMemo(() => {
    if (searchQuery.trim() === "") return [];
    const lowerCaseQuery = searchQuery.toLowerCase();
    const suggestions = new Set<string>();
    // videosToDisplayÍ∞Ä Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Ïù¥Îì† ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Ïù¥Îì† ÏÉÅÍ¥ÄÏóÜÏù¥ ÏÇ¨Ïö©
    videosToDisplay.forEach(video => {
      if (video.title.toLowerCase().includes(lowerCaseQuery)) {
        suggestions.add(video.title);
      }
    });
    return Array.from(suggestions).slice(0, 5);
  }, [videosToDisplay, searchQuery]);


  const onMouseDown = useCallback((e: React.MouseEvent) => {
    setIsDragging(true);
    setStartX(e.pageX);
    setDraggedDistance(0);
    overlappingBannersWrapperRef.current?.classList.add('active-drag');
  }, []);

  const onMouseMove = useCallback((e: MouseEvent) => {
    if (!isDragging) return;
    e.preventDefault();
    const walk = e.pageX - startX;
    setDraggedDistance(walk);

    const newTranslateX = currentTranslateX + walk;

    const bannerWidth = 600;
    const overlap = 225;
    const step = bannerWidth - overlap;

    const totalContentWidth = bannerWidth + (bannerVideos.length - 1) * step;
    const wrapperVisibleWidth = overlappingBannersWrapperRef.current?.clientWidth || 0;

    const actualMinTranslateX = totalContentWidth > wrapperVisibleWidth ? (wrapperVisibleWidth - totalContentWidth) : 0;
    const maxTranslateX = 0;

    const clampedTranslateX = Math.max(actualMinTranslateX, Math.min(newTranslateX, maxTranslateX));
    setCurrentTranslateX(clampedTranslateX);
  }, [isDragging, startX, currentTranslateX, bannerVideos.length]);

  const onMouseUp = useCallback(() => {
    setIsDragging(false);
    overlappingBannersWrapperRef.current?.classList.remove('active-drag');
    setStartX(0);

    const bannerWidth = 600;
    const overlap = 225;
    const step = bannerWidth - overlap;

    const currentOffset = -currentTranslateX;
    let closestBannerIndex = 0;
    let minDistance = Infinity;

    for (let i = 0; i < bannerVideos.length; i++) {
        const targetOffset = i * step;
        const distance = Math.abs(currentOffset - targetOffset);
        if (distance < minDistance) {
            minDistance = distance;
            closestBannerIndex = i;
        }
    }
    setLastActiveBannerIndex(closestBannerIndex);
  }, [isDragging, currentTranslateX, bannerVideos.length]);

  useEffect(() => {
    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);

    return () => {
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    };
  }, [onMouseMove, onMouseUp]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (filterButtonRef.current && !filterButtonRef.current.contains(event.target as Node) && showFilterOptions) {
        setShowFilterOptions(false);
      }
      if (sortDropdownRef.current && !sortDropdownRef.current.contains(event.target as Node)) {
        // ÎìúÎ°≠Îã§Ïö¥Ïù¥ Ïó¥Î†§ÏûàÎäî ÏÉÅÌÉúÎ•º Í¥ÄÎ¶¨ÌïòÎäî Î≥ÑÎèÑ ÏÉÅÌÉúÍ∞Ä ÏóÜÏúºÎØÄÎ°ú, ÌïÑÏöîÌïòÎ©¥ Ï∂îÍ∞Ä
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showFilterOptions]);


  const UnifiedBanner = ({
    imageSrc,
    videoUrl,
    topText,
    middleText,
    bottomText,
    index,
    onMouseEnter,
    onMouseLeave,
  }: {
    imageSrc: string;
    videoUrl: string;
    topText?: string;
    middleText?: string;
    bottomText?: string;
    index: number;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
  }) => {
    const isActive = hoveredBannerIndex === index || (hoveredBannerIndex === null && lastActiveBannerIndex === index);

    const handleBannerClick = () => {
      if (Math.abs(draggedDistance) > 10) {
        return;
      }
      console.log(`ÏòÅÏÉÅÏùÑ Ïû¨ÏÉùÌï©ÎãàÎã§: ${videoUrl}`);
      // Ïã§Ï†ú ÎπÑÎîîÏò§ URLÎ°ú Ïù¥ÎèôÌïòÍ±∞ÎÇò Î™®Îã¨ÏùÑ ÎùÑÏö∏ Ïàò ÏûàÏäµÎãàÎã§.
      window.open(videoUrl, '_blank'); // ÏÉà ÌÉ≠ÏóêÏÑú ÎπÑÎîîÏò§ URL Ïó¥Í∏∞
    };

    return (
      <div
        className={`banner-container ${isActive ? "active" : ""}`}
        onMouseEnter={onMouseEnter}
        onMouseLeave={onMouseLeave}
        onClick={handleBannerClick}
      >
        <img src={imageSrc} className="banner-image" alt={middleText || "Î∞∞ÎÑà Ïù¥ÎØ∏ÏßÄ"} />
        <div className="text-overlay">
          {isActive && <div className="toptext">{topText}</div>}
          <div className="middletext">{middleText}</div>
          <div className="bottomtext">{bottomText}</div>
        </div>
      </div>
    );
  };


  return (
    <div className="ex-container">
      {/* Î∞∞ÎÑà ÏÑπÏÖò - ÎìúÎûòÍ∑∏ Í∞ÄÎä• */}
      <div
        className="overlapping-banners-wrapper"
        ref={overlappingBannersWrapperRef}
        onMouseDown={onMouseDown}
        onMouseLeave={() => {
            if (!isDragging) {
                setHoveredBannerIndex(null);
            }
        }}
      >
        <div className="banners-inner-container" style={{ transform: `translateX(${currentTranslateX}px)` }}>
          {loadingBanner && <div className="loading-message">Ïò§ÎäòÏùò Ï∂îÏ≤ú ÏòÅÏÉÅÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</div>}
          {errorBanner && <div className="error-message">Error: {errorBanner}</div>}
          {/* ÏóêÎü¨ Î∞úÏÉù Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥ÌïòÎØÄÎ°ú, bannerVideos.lengthÍ∞Ä 0Ïù∏ Í≤ΩÏö∞Îäî Í±∞Ïùò ÏóÜÏùå */}
          {(!loadingBanner && bannerVideos.length > 0) && bannerVideos.map((banner, index) => (
            <UnifiedBanner
              key={banner.id || index}
              index={index}
              imageSrc={banner.thumbnail_url} // üí° Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎ™Ö ÏÇ¨Ïö©
              videoUrl={banner.video_url} // üí° Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎ™Ö ÏÇ¨Ïö©
              topText={banner.topText}
              middleText={banner.middleText}
              bottomText={banner.bottomText}
              onMouseEnter={() => {
                  setHoveredBannerIndex(index);
                  setLastActiveBannerIndex(index);
              }}
              onMouseLeave={() => {
                  setHoveredBannerIndex(null);
              }}
            />
          ))}
        </div>
      </div>

        {/* Í≤ÄÏÉâÏ∞Ω */}
      <div className="search-section">
        <div className="search-input-wrapper">
          <input
            type="text"
            placeholder="Í≤ÄÏÉâ"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onFocus={() => setShowAutocomplete(true)}
            onBlur={() => setTimeout(() => setShowAutocomplete(false), 100)}
            className="search-input-styled"
          />
          {searchQuery.length > 0 ? (
            <span className="search-icon clear-icon" onClick={() => setSearchQuery("")}>
              √ó
            </span>
          ) : (
            <span className="search-icon">
              <img src={searchimg} className="search-image-icon" alt="Search Icon" />
            </span>
          )}
        </div>
        {showAutocomplete && autocompleteSuggestions.length > 0 && (
          <div className="autocomplete-suggestions">
            {autocompleteSuggestions.map((suggestion, index) => (
              <div
                key={index}
                className="suggestion-item"
                onMouseDown={(e) => {
                  e.preventDefault();
                  setSearchQuery(suggestion);
                  setShowAutocomplete(false);
                }}
              >
                {suggestion}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* ÌïÑÌÑ∞ Î∞è Ï†ïÎ†¨ ÏÑπÏÖò */}
      <div className="filter-sort-section">
        <div className="filter-button-wrapper" ref={filterButtonRef}>
          <button className="filter-button" onClick={() => setShowFilterOptions(!showFilterOptions)}>
            <span className="filter-icon">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
                    <path d="M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"/>
                </svg>
            </span>
          </button>
          {showFilterOptions && (
            <div className="filter-options-dropdown">
              <label>
                <input
                  type="checkbox"
                  checked={showOnlyCorrectionVideos}
                  onChange={() => setShowOnlyCorrectionVideos(!showOnlyCorrectionVideos)}
                />
                ÏûêÏÑ∏ ÍµêÏ†ï Í∞ÄÎä•Ìïú ÏòÅÏÉÅÎßå Î≥¥Í∏∞
              </label>
              <label>
                <input
                  type="checkbox"
                  checked={showOnlyFavoriteVideos}
                  onChange={() => setShowOnlyFavoriteVideos(!showOnlyFavoriteVideos)}
                />
                Ï¶êÍ≤® Ï∞æÍ∏∞Ìïú ÏòÅÏÉÅÎßå Î≥¥Í∏∞
              </label>
            </div>
          )}
        </div>

        <div className="sort-dropdown-wrapper" ref={sortDropdownRef}>
          <select className="sort-dropdown" value={sortType} onChange={(e) => setSortType(e.target.value as "recent" | "like" | "watch")}>
            <option value="recent">ÏµúÏã†Ïàú</option>
            <option value="like">Ï∂îÏ≤úÏàú</option>
            <option value="watch">Ï°∞ÌöåÏàú</option>
          </select>
          <span className="dropdown-arrow"></span>
        </div>
      </div>

      {/* ÏòÅÏÉÅ Î™©Î°ù (Ïç∏ÎÑ§Ïùº Î∞è Ï†ïÎ≥¥ Ìè¨Ìï®) */}
      <div className="video-list">
        {loadingVideos && <div className="loading-message">Ïö¥Îèô ÏòÅÏÉÅ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>}
        {errorVideos && <div className="error-message" style={{ color: 'red', textAlign: 'center', padding: '20px' }}>
                            Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {errorVideos}
                            <p>ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÌëúÏãúÎê©ÎãàÎã§.</p>
                            <p>Î∞±ÏóîÎìú ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ, `API_BASE_URL`Ïù¥ Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.</p>
                          </div>}

        {/* Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ ÎïåÎßå ÏòÅÏÉÅ ÌëúÏãú (Î°úÎî© Ï§ëÏù¥ ÏïÑÎãàÎ©¥ÏÑú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ 'ÏòÅÏÉÅ ÏóÜÏùå' Î©îÏãúÏßÄ) */}
        {!loadingVideos && videosToDisplay.length > 0 ? (
          videosToDisplay.map((video) => (
            <div key={video.id} className="video-card">
              <img src={video.thumbnail_url} alt={video.title} className="video-thumbnail" /> {/* üí° Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎ™Ö ÏÇ¨Ïö© */}
              <div className="video-details">
                <div className="video-title">{video.title}</div>
                <div className="video-meta">
                    <span>Ï°∞ÌöåÏàò: {video.views}</span>
                    <span>Ï∂îÏ≤ú: {video.recommendations}</span> {/* üí° Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎ™Ö ÏÇ¨Ïö© */}
                    <span>ÎÇ†Ïßú: {new Date(video.upload_date).toLocaleDateString()}</span> {/* üí° Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎ™Ö ÏÇ¨Ïö© Î∞è ÎÇ†Ïßú ÌòïÏãù Î≥ÄÌôò */}
                    {video.correctable === 1 && <span className="correction-tag">ÏûêÏÑ∏ ÍµêÏ†ï</span>} {/* üí° Î≥ÄÍ≤ΩÎêú ÌïÑÎìúÎ™Ö ÏÇ¨Ïö© */}
                    {video.isFavorite && <span className="favorite-tag">‚òÖ Ï¶êÍ≤®Ï∞æÍ∏∞</span>}
                </div>
              </div>
            </div>
          ))
        ) : (
          !loadingVideos && !errorVideos && <div className="no-videos-message">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÍ±∞ÎÇò ÏòÅÏÉÅÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</div>
        )}
      </div>
    </div>
  );
};

export default Exercise;